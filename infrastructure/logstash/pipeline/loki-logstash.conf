input {
  tcp {
    port => 5044
    codec => json
  }
}

filter {
  if [log_source] == "Apache" {
    mutate {
      rename => {
        "Access To" => "__access_to"
        "HTTP Request Method" => "__http_request_method"
        "HTTP Response Code" => "__http_response_code"
        "Source Address" => "_source_address"
        "Source Country Name" => "_source_country_name"
        "URL" => "_url"
        "Attacks" => "_attacks"
        "Reports" => "_reports"
        "geoip.geo.location.lat" => "_latitude"
        "geoip.geo.location.lon" => "_longitude"
      }

      convert => {
        "_latitude" => "float"
        "_longitude" => "float"
        "_attacks" => "integer"
        "_reports" => "integer"
      }

      remove_field => ["logstash_time","timestamp"]
    }
  }

  if [log_source] == "Netflow" {
    mutate {
      rename => {
        "netflow.direction" => "__netflow_direction"
        "netflow.tcp_flags" => "__tcp_flags"
        "IP Protocol Number" => "__ip_protocol_number"
        "Destination Address" => "_destination_address"
        "Destination Country" => "_destination_country"
        "Destination Host" => "_destination_host"
        "Destination Port" => "_destination_port"
        "Destination Reports" => "_destination_reports"
        "Source Address" => "_source_address"
        "Source Country" => "_source_country"
        "Source Host" => "_source_host"
        "Source Port" => "_source_port"
        "Source Reports" => "_source_reports"
        "Bytes" => "_bytes"
        "dst_local" => "_dst_local"
        "src_local" => "_src_local"
        "netflow.dst_geoip.geo.location.lat" => "_dst_latitude"
        "netflow.dst_geoip.geo.location.lon" => "_dst_longitude"
        "netflow.src_geoip.geo.location.lat" => "_src_latitude"
        "netflow.src_geoip.geo.location.lon" => "_src_longitude"
      }

      convert => {
        "_dst_latitude" => "float"
        "_dst_longitude" => "float"
        "_src_latitude" => "float"
        "_src_longitude" => "float"
        "_bytes" => "integer"
        "_dst_local" => "boolean"
        "_src_local" => "boolean"
      }
    }

    # translate {
    #   field => "__netflow_direction"
    #   destination => "__netflow_direction"
    #   dictionary => {
    #     "0" => "ingress"
    #     "1" => "egress"
    #   }
    #   override => true
    # }
  }

  if [log_source] == "Snort" {
    mutate {
      rename => {
        "Classification" => "__classification"
        "Priority" => "__priority"
        "Protocol" => "__protocol"
        "Snort Message" => "_snort_message"
        "ruleID" => "_rule_id"
        "Source Attacks" => "_source_attacks"
        "Source Reports" => "_source_reports"
        "Destination Address" => "_destination_address"
        "Destination Hostname" => "_destination_hostname"
        "Destination Port" => "_destination_port"
        "Source Address" => "_source_address"
        "Source Hostname" => "_source_hostname"
        "Source Port" => "_source_port"
        "dst_local" => "_dst_local"
        "src_local" => "_src_local"
        "dst_geoip.geo.location.lat" => "_dst_latitude"
        "dst_geoip.geo.location.lon" => "_dst_longitude"
        "src_geoip.geo.location.lat" => "_src_latitude"
        "src_geoip.geo.location.lon" => "_src_longitude"
      }

      convert => {
        "_dst_latitude" => "float"
        "_dst_longitude" => "float"
        "_src_latitude" => "float"
        "_src_longitude" => "float"
        "_source_attacks" => "integer"
        "_source_reports" => "integer"
        "_dst_local" => "boolean"
        "_src_local" => "boolean"
      }
    }
  }


  date {
    match => ["Timestamp", "ISO8601"]
    target => "@timestamp"
  }

  mutate {
    remove_field => [
      "Timestamp","_id","_index","_source","_type","sort","tags","highlight"
    ]
    rename => {
      "log_source" => "__log_source"
    }
  }

  ruby {
    code => 'event.set("__log_record", event.to_json)'
  }
}

output {
  stdout {
    codec => rubydebug
  }
  
  # file {
  #   path => "/usr/share/logstash/logs/%{__log_source}-%{+YYYY-MM-dd'T'HH:mm:ss.SSSZ}.log"
  #   codec => json_lines
  # }

  if [__log_source] == "Apache" {

    loki {
      url => "http://loki:3100/loki/api/v1/push"
      include_fields => ["__access_to","__http_request_method","__http_response_code","__log_source","@version","@timestamp"]
      metadata_fields => ["_attacks","_reports","_source_address","_source_country_name","_url","_latitude","_longitude"]
      message_field => "__log_record"
    }
  }

  if [__log_source] == "Netflow" {
    loki {
      url => "http://loki:3100/loki/api/v1/push"
      include_fields => ["__ip_protocol_number","__log_source","__netflow_direction","__tcp_flags","@version","@timestamp"]
      metadata_fields => [
      "_bytes","_destination_address","_destination_country","_destination_host","_destination_port",
      "_destination_reports","_dst_latitude","_dst_local","_dst_longitude","_source_address","_source_country",
      "_source_host","_source_port","_source_reports","_src_latitude","_src_local","_src_longitude"]
      message_field => "__log_record"
    }
  }

  if [__log_source] == "Snort" {
    loki {
      url => "http://loki:3100/loki/api/v1/push"
      include_fields => ["__classification","__log_source","__priority","__protocol","__timestamp","@version","@timestamp"]
      metadata_fields => [
      "_destination_address","_destination_hostname","_destination_port","_dst_latitude","_dst_local",
      "_dst_longitude","_rule_id","_snort_message","_source_address","_source_attacks","_source_hostname",
      "_source_port","_source_reports","_src_latitude","_src_local","_src_longitude"]
      message_field => "__log_record"
    }
  }
}
